currently:
    shuntingyard stuff could probably use renaming
        ASTree -> Expr_Tree ?
    how can i run a parsec parser from within another one?


[ ] implement pragmas, don't just skip them
[ ] in a line-character comment, '}' should not be allowed immediately after ';'
[ ] right now, doc comments are only supported before procedures. is that good?
[ ] code gen should use types other than int ?
[ ] Param should take a pattern instead of an identifier
[ ] postfix operators need to handle opers other than ++ and --
[ ] expressions should be transformed a lot before being converted to C
        example: `x + y` in souc is *not* the same as x + y in C
[ ] subroutines should also be converted (mapped?) to do the right thing.
[ ] maybe don't use haskell's `String` and `++` for code gen, that seems slow
[ ] generating params is really not implemented at all
[ ] don't always assume `int`, that was super lazy hacking
[ ] keep bindings of variables (not only constants)
[ ] shuntingyard uses `Parsec.string "<>"` which will explode if a < is read first
[ ] do bindings after program tree is built, not in the parser
[ ] remove postfix opers i think.
[ ] give NewType a smart constructor that prevents type names with lowercase first letter
[ ] make TypeError parameters always be in the right order with newtypes
    e. g. TypeError (Expect t) (Got t)
[ ] fix the data structure (or use smart constructors) for the Contexts. shadowing should be impossible.
